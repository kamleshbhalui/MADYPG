// NOTE: SHELLMAPSHADER_WRKGRPSIZE defined during compilation
layout(local_size_x = SHELLMAPSHADER_WRKGRPSIZE, local_size_y = 1, local_size_z = 1) in;

// input buffer definitions ---------------------------------------------------

struct _vertices
{
  // vec4 x;
  // vec4 other;
  // NOTE: apparently structural alignment takes biggest element of structure. eg. vec3 and vec4 will be aligned like 2 vec4 !
  // either make sure that buffers are aligned nicely like that (if using vec4 for pos then make sure its a multiple of 4x4byte)
  // or use separate floats which make alignent 4byte
  float x,y,z,th,tarc,nx,ny,nz,u,v,r;//,pad0;
};
layout(std430, binding = 0) buffer _vertexBuffer
{
  _vertices data[];
} buf_Xws;


struct _bary {
  float a, b, c;
  int id;
};
layout(std430, binding = 1) readonly buffer _baryBuffer
{
  _bary data[];
// } buf_B;
} buf_B0;

struct _alignedvec3 {
  float x,y,z;
};
struct _aligneduvec3 {
  uint x,y,z;
};

layout(std430, binding = 2) readonly buffer _normalBuffer
{
  _alignedvec3 data[];
} buf_NNv;


layout(std430, binding = 3) readonly buffer _meshXBuffer
{
  // vec3 data[];
  _alignedvec3 data[];
} buf_meshX;

layout(std430, binding = 4) readonly buffer _meshFBuffer
{
  // _aligneduvec3 data[];
  uint[3] data[];
} buf_meshF;

layout(std430, binding = 5) readonly buffer _meshFmsBuffer
{
  // _aligneduvec3 data[];
  uint[3] data[];
} buf_meshFms;

struct _DiU {
  vec2 Dcol0, Dcol1, U0;
};
layout(std430, binding = 6) readonly buffer _meshDiUBuffer
{
  _DiU data[];
} buf_meshDinvU;

struct _defF {
  float F11,F21,F31,F12,F22,F32;
};

mat2x3 to_matrix(_defF F) { // NOTE glsl 2x3 is 2 columns 3 rows
  mat2x3 M;
  M[0] = vec3(F.F11, F.F21, F.F31);
  M[1] = vec3(F.F12, F.F22, F.F32);
  return M;
}

layout(std430, binding = 7) readonly buffer _meshdefFBuffer // per-face defF
{
  _defF data[];
} buf_meshdefF;

layout(std430, binding = 8) readonly buffer _meshdefFvBuffer // per-vertex defF
{
  _defF data[];
} buf_meshdefFv;

layout(std430, binding = 9) readonly buffer _meshUBuffer
{
  vec2 data[];
} buf_meshU;

// ----------------------------------------------------------------------------

// uniform bool apply = true;
// uniform bool flat_normals = false;
uniform uint num_vertices;
uniform float phong_deformation = 0.5;

void main()
{
  uint vix = gl_GlobalInvocationID.x;
  if (vix >= num_vertices) // incase of num_vertices incompatible with workgroup size
    return;

  int tri = buf_B0.data[vix].id;

  if(tri < 0) // skip 'deleted' vertices
    return;

  _vertices V = buf_Xws.data[vix];

  // recompute barycentric coordinates (assumed same triangle after displacement)
  float[3] abc;
  {
    vec2 p = vec2(V.x, V.y);
    _DiU DiU = buf_meshDinvU.data[tri];
    mat2 Dinv = mat2(DiU.Dcol0, DiU.Dcol1);
    vec2 bc = Dinv * (p - DiU.U0);
    abc[0] = 1 - bc.x - bc.y;
    abc[1] = bc.x;
    abc[2] = bc.y;
  }


  // barycentrically mapped position in triangle
  uint[3] ws_ixs = buf_meshF.data[tri];
  vec3 phi = vec3(0);
  for (int i = 0; i < 3; ++i) {
    _alignedvec3 xi = buf_meshX.data[ws_ixs[i]];
    phi += vec3(xi.x, xi.y, xi.z) * abc[i];
  }

  // optional phong deformation using triangle deformation gradients defF
  uint[3] ms_ixs = buf_meshFms.data[tri];
  if (phong_deformation > 0) {
    vec2 p = vec2(V.x, V.y);

    for (int i = 0; i < 3; ++i) {
      uint ix = ms_ixs[i];
      mat2x3 defFv_i = to_matrix(buf_meshdefFv.data[ix]);
      vec2 u_i = buf_meshU.data[ix];
      phi += phong_deformation * (
        abc[i] * (defFv_i * (p  - u_i))
      );
    }
  }

  // interpolated vertex normal
  vec3 n;
  // if (flat_normals) {
  //   _alignedvec3 n0 = buf_NNv.data[tri];
  //   n = vec3(n0.x, n0.y, n0.z);
  // } else {
    n = vec3(0);
    for (int i = 0; i < 3; ++i) {
      _alignedvec3 ni = buf_NNv.data[ms_ixs[i]];
      n += vec3(ni.x, ni.y, ni.z) * abc[i];
    }
    n = normalize(n);
  // }

  // add thickness
  float h = V.z;
  phi += h * n;

  // store
  V.x = phi.x;
  V.y = phi.y;
  V.z = phi.z;

  // transform reference frame director / edge normal: nx ny nz
  {
    // approximate transformation matrix (e.g. ignoring phong gradient,
    // using normal at vertex position as compared to middle of the edge, ...)
    // works well with later reorthonormalization in the yarn shader
    mat3 Q = mat3(0);
    _defF defF = buf_meshdefF.data[tri]; // triangle def.grad.
    Q[0] = vec3(defF.F11, defF.F21, defF.F31);
    Q[1] = vec3(defF.F12, defF.F22, defF.F32);
    Q[2] = n; // NOTE not orthogonal, building a sheared frame

    // transform
    vec3 Qrefd1 = inverse(transpose(Q)) * vec3(V.nx,V.ny,V.nz);
    V.nx = Qrefd1.x;
    V.ny = Qrefd1.y;
    V.nz = Qrefd1.z;
  }

  buf_Xws.data[vix] = V;
}